// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace mci_main.Migrations
{
    [DbContext(typeof(MciContext))]
    [Migration("20221022153510_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.8");

            modelBuilder.Entity("mci_main.Data.Practitioner", b =>
                {
                    b.Property<int>("MciIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Img")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Title")
                        .HasColumnType("INTEGER");

                    b.HasKey("MciIdx");

                    b.ToTable("Practitioner");
                });

            modelBuilder.Entity("mci_main.Data.PractitionerSpecialty", b =>
                {
                    b.Property<int>("MciIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("PracIdx")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<int>("SpecIdx")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(3);

                    b.HasKey("MciIdx");

                    b.HasIndex("PracIdx");

                    b.HasIndex("SpecIdx");

                    b.ToTable("PractitionerSpecialty");
                });

            modelBuilder.Entity("mci_main.Data.Review", b =>
                {
                    b.Property<int>("MciIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateVisited")
                        .HasColumnType("TEXT");

                    b.Property<int>("PracIdx")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MciIdx");

                    b.HasIndex("PracIdx");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("mci_main.Data.Specialty", b =>
                {
                    b.Property<int>("MciIdx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nominative")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MciIdx");

                    b.ToTable("Specialty");
                });

            modelBuilder.Entity("mci_main.Data.PractitionerSpecialty", b =>
                {
                    b.HasOne("mci_main.Data.Practitioner", "Practitioner")
                        .WithMany("PractitionerSpecialties")
                        .HasForeignKey("PracIdx")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mci_main.Data.Specialty", "Specialty")
                        .WithMany("PractitionerSpecialties")
                        .HasForeignKey("SpecIdx")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practitioner");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("mci_main.Data.Review", b =>
                {
                    b.HasOne("mci_main.Data.Practitioner", "Practitioner")
                        .WithMany("Reviews")
                        .HasForeignKey("PracIdx")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Practitioner");
                });

            modelBuilder.Entity("mci_main.Data.Practitioner", b =>
                {
                    b.Navigation("PractitionerSpecialties");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("mci_main.Data.Specialty", b =>
                {
                    b.Navigation("PractitionerSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
